package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/dave/jennifer/jen"

	"github.com/aweris/gale/gha2dagger/generator"
)

const runtime = "github.com/aweris/gale/daggerverse/actions/runtime@01999763545556511d53a8649fb66ffe4e977d8f"

// generate generates the custom action module.
func generate(dest string, ca *CustomAction) error {
	dest = filepath.Join(dest, ca.Repo)

	// initialize module
	if err := initModule(dest); err != nil {
		return err
	}

	// generate main.go
	return generateModuleCode(dest, ca)
}

// initModule initializes the module.
func initModule(dest string) error {
	// create destination directory
	if err := os.MkdirAll(dest, 0777); err != nil {
		return fmt.Errorf("failed to create destination directory %s: %w", dest, err)
	}

	// check if dagger.json exists
	isDaggerJSONExist, err := isDaggerJSONExist(dest)
	if err != nil {
		return fmt.Errorf("failed to check dagger.json existence: %w", err)
	}

	// check if dagger is installed
	dagger, err := exec.LookPath("dagger")
	if err != nil {
		fmt.Printf("==> Dagger not found. Ensure dagger is installed and available in PATH\n")
		return err
	}

	// initialize module if dagger.json does not exist
	if !isDaggerJSONExist {
		fmt.Printf("==> Initializing module %s\n", filepath.Base(dest))

		initCmd := exec.Cmd{
			Path:   dagger,
			Args:   []string{"dagger", "mod", "init", "--name", filepath.Base(dest), "--sdk", "go", "--silent"},
			Dir:    dest,
			Env:    os.Environ(),
			Stdout: os.Stdout,
			Stderr: os.Stderr,
		}

		if err := initCmd.Run(); err != nil {
			return err
		}
	}

	// add/update runtime dependency
	fmt.Printf("==> Ensuring module %s dependencies\n", filepath.Base(dest))

	depsCmd := exec.Cmd{
		Path:   dagger,
		Args:   []string{"dagger", "mod", "use", "--silent", runtime},
		Dir:    dest,
		Env:    os.Environ(),
		Stdout: os.Stdout,
		Stderr: os.Stderr,
	}

	return depsCmd.Run()
}

// isDaggerJSONExist checks if dagger.json exists in the given directory.
func isDaggerJSONExist(dest string) (bool, error) {
	path := filepath.Join(dest, "dagger.json")
	if _, err := os.Stat(path); err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}

		return false, fmt.Errorf("failed to stat %s: %w", path, err)
	}

	return true, nil
}

// generateModuleCode generates the module code for the given custom action.
func generateModuleCode(dest string, ca *CustomAction) error {
	fmt.Printf("==> Generating module %s code\n", filepath.Base(dest))

	module := generator.FormatModuleName(ca.RepoName)

	// create new file
	f := jen.NewFile("main")

	// header comment
	f.HeaderComment("Code generated by gha2dagger. DO NOT EDIT.")

	// module entrypoint
	f.Comment(fmt.Sprintf("%s represents the GitHub action. %s", module, ca.Meta.Description)).Line().Type().Id(module).Struct()

	// add run function
	f.Add(generator.GenRunFn(module, ca.Repo, ca.Ref, ca.Meta.Inputs))

	// save file to filesystem
	if err := f.Save(filepath.Join(dest, "main.go")); err != nil {
		fmt.Println("Error saving file:", err)
	}

	return nil
}
